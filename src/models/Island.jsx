/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Shahriar Shahrabi (https://sketchfab.com/shahriyarshahrabi)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/floating-castle-1e157bab3a4042eb834ca07d73aa28ce
Title: Floating Castle
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from '@react-three/fiber';
import islandScene from '../assets/3d/floating_castle.glb';
import { a } from "@react-spring/three";

export function Island({ isRotating, setIsRotating, ...props }) {
    const islandRef = useRef()
    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(islandScene);


    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        lastX.current = clientX;
    }

    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }

    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const delta = (clientX - lastX.current) / viewport.width;
            islandRef.current.rotation.y += delta * 0.01 * Math.PI;
            lastX.current = clientX;
            rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    }

     // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };


    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if (Math.abs(rotationSpeed.current) < 0.01) {
                rotationSpeed.current = 0;
            }
            else {
                const rotation = islandRef.current.rotation.y;
                const normalizedRotation =
                    ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

                // Set the current stage based on the island's orientation
                switch (true) {
                    case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                        setCurrentStage(4);
                        break;
                    case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                        setCurrentStage(3);
                        break;
                    case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                        setCurrentStage(2);
                        break;
                    case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                        setCurrentStage(1);
                        break;
                    default:
                        setCurrentStage(null);
                }
            }
        }
    })


    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        window.addEventListener("keydown", handleKeyDown);
        window.addEventListener("keyup", handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            window.addEventListener("keydown", handleKeyDown);
            window.addEventListener("keyup", handleKeyUp);
        }
    }, [gl, handlePointerDown, handlePointerMove, handlePointerUp])


    return (
        <a.group {...props} dispose={null} ref={islandRef}>
            <a.group rotation={[-Math.PI / 2, 0, 0]} scale={0.035}>
                <a.group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <a.group
                        position={[-724.465, 399.803, 29.097]}
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <mesh
                            geometry={nodes.Attachments_AllAccesoriesCombined_0.geometry}
                            material={materials.AllAccesoriesCombined}
                        />
                        <mesh
                            geometry={nodes.Attachments_AllAccesoriesCombined_0_1.geometry}
                            material={materials.AllAccesoriesCombined}
                        />
                    </a.group>
                    <a.group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <mesh
                            geometry={nodes.CastleTrurtleOutline_Outline_0.geometry}
                            material={materials.Outline}
                        />
                        <mesh
                            geometry={nodes.CastleTrurtleOutline_Outline_0_1.geometry}
                            material={materials.Outline}
                        />
                        <mesh
                            geometry={nodes.CastleTrurtleOutline_Outline_0_2.geometry}
                            material={materials.Outline}
                        />
                        <mesh
                            geometry={nodes.CastleTrurtleOutline_Outline_0_3.geometry}
                            material={materials.Outline}
                        />
                    </a.group>
                    <a.group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <mesh
                            geometry={
                                nodes.TurtleAndCastle_CombinedCastleMaterial001_0.geometry
                            }
                            material={materials["CombinedCastleMaterial.001"]}
                        />
                        <mesh
                            geometry={
                                nodes.TurtleAndCastle_CombinedCastleMaterial001_0_1.geometry
                            }
                            material={materials["CombinedCastleMaterial.001"]}
                        />
                        <mesh
                            geometry={
                                nodes.TurtleAndCastle_CombinedCastleMaterial001_0_2.geometry
                            }
                            material={materials["CombinedCastleMaterial.001"]}
                        />
                    </a.group>
                    <mesh
                        geometry={nodes.CloudsFlat003_CloudBaked_0.geometry}
                        material={materials.CloudBaked}
                        position={[1.987, -571.028, -9.53]}
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={120}
                    />
                </a.group>
            </a.group>
        </a.group>
    );
}
